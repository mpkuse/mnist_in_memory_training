name: "LeNet"


################## DATA-Train #####################
layer {
  name: "data"
  type: "Input"
  top: "data"
  input_param { shape: { dim: 100 dim: 3 dim: 28 dim: 28 } }
    include {
    phase: TRAIN
  }
}
layer {
  name: "label"
  type: "Input"
  top: "label"
  input_param { shape: { dim: 100 dim: 2 } }
    include {
    phase: TRAIN
  }
}

#layer {
#  name: "data"
#  type: "MemoryData"
#  top: "data"
#  memory_data_param {
#    batch_size: 100
#    channels: 2
#    height: 1
#    width: 1
#  }
#}
###################### DATA - TEST ##################
#layer {
#  name: "mnist"
#  type: "HDF5Data"
#  top: "data"
#  top: "label"
#  include {
#    phase: TEST
#  }
#   	hdf5_data_param {
#     source: "./train_data_hdf5/tk10k.txt"
#     batch_size: 100
#   }
#}



##################### CONV-POOL-1 ####################
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}



##################### CONV-POOL-2 ####################
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}


######################### FULLY-CONNECTED #####################
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}


layer {
  name: "ip1x"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip1x"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1x"
  type: "ReLU"
  bottom: "ip1x"
  top: "ip1x"
}




layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1x"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}


######## Accuracy and Loss ########
#layer {
#  name: "accuracy"
#  type: "Accuracy"
#  bottom: "ip2"
#  bottom: "label"
#  top: "accuracy"
#  include {
#    phase: TEST
#  }
#}
#layer {
#  name: "loss"
#  type: "SoftmaxWithLoss"
#  bottom: "ip2"
#  bottom: "label"
#  top: "loss"
#}
layer {
	name: "loss"
	type: "EuclideanLoss"
	bottom: "ip2"
	bottom: "label"
	top: "loss"
}
